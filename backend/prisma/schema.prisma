// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  avatar      Bytes?
  avatarMime  String?
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recipeLists RecipeList[]
}

model RecipeList {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  recipes Recipe[]
}

model Recipe {
  id           String       @id @default(uuid())
  name         String
  description  String
  category     Category     @relation(fields: [categoryId], references: [id])
  categoryId   String
  ingredients  Ingredient[] // One-to-many: a recipe has many ingredients
  instructions String
  recipeLists  RecipeList[]
  likes        String[] // store user IDs as UUID strings
  dislikes     String[] // store user IDs as UUID strings
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Ingredient {
  id        String   @id @default(uuid())
  name      String
  amount    String
  calories     Float
  protein      Float
  fat          Float
  saturatedFat Float
  carbs        Float
  fiber        Float
  sugar        Float 
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String
}
