// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  avatar      Bytes?
  avatarMime  String?
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  recipeLists RecipeList[]
}

model RecipeList {
  id        String   @id @default(uuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  isPrivate Boolean  @default(false)
  userId    String
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  recipes Recipe[] // 1 category → many recipes
}

model Tag {
  id      String   @id @default(uuid())
  name    String   @unique
  recipes Recipe[] @relation("RecipeTags") // many ↔ many with Recipe
}

model Comment {
  id      String   @id @default(uuid())
  comment String   
  recipeId String
  recipe Recipe @relation(fields: [recipeId], references: [id])
}

model Recipe {
  id              String       @id @default(uuid())
  name            String
  description     String
  ingredients     String?
  ingredientsList Ingredient[]
  instructions    String
  image           String?

  // 1 recipe → 1 category
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // many ↔ many with Tag
  tags Tag[] @relation("RecipeTags")

  likes       String[] // store user IDs as UUID strings (maybe refs to user?)
  dislikes    String[] // store user IDs as UUID strings (maybe refs to user?)
  comments Comment[]
  recipeLists RecipeList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id          String @id @default(uuid())
  name        String // e.g. "chicken breast"
  servingSize Int // amount in grams
  recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    String
  calories    Float
  protein     Float
  fat         Float
  carbs       Float
}
